/**
 * Definition for a binary tree node.
 * class TreeNode {
 *     val: number
 *     left: TreeNode | null
 *     right: TreeNode | null
 *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
 *         this.val = (val===undefined ? 0 : val)
 *         this.left = (left===undefined ? null : left)
 *         this.right = (right===undefined ? null : right)
 *     }
 * }
 */

function binaryTreePaths(root: TreeNode | null): string[] {
    if(root === null) {
        return [""];
    }

    const result: string[] = [];
    const  binaryTreePathsByRecursively = (node: TreeNode | null, path: number[]) => {
        if(node === null) {
            return;
        }

        if(node.left === null && node.right === null) {
            result.push([...path, node.val].join("->"));
        } else {
            binaryTreePathsByRecursively(node.left, [...path, node.val]);
            binaryTreePathsByRecursively(node.right, [...path, node.val]);
        }
    };

    binaryTreePathsByRecursively(root, []);

    return result;
};